// <auto-generated />
using System;
using AirQualityUzbekistan.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirQualityUzbekistan.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250513174659_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("AirQualityUzbekistan.Models.AirQualityRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AQICN")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AQIUS")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Humidity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("MainPollutantCN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MainPollutantUS")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Pressure")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Temperature")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("WindDirection")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("AirQualityRecords");
                });

            modelBuilder.Entity("AirQualityUzbekistan.Models.LocationCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationStateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationStateId");

                    b.ToTable("LocationCities");
                });

            modelBuilder.Entity("AirQualityUzbekistan.Models.LocationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LocationStates");
                });

            modelBuilder.Entity("AirQualityUzbekistan.Models.LocationCity", b =>
                {
                    b.HasOne("AirQualityUzbekistan.Models.LocationState", "LocationState")
                        .WithMany("Cities")
                        .HasForeignKey("LocationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationState");
                });

            modelBuilder.Entity("AirQualityUzbekistan.Models.LocationState", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
